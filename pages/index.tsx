import Head from "next/head";
import styles from "../styles/Home.module.scss";
import { useDispatch, useSelector } from "react-redux";
import { clr_pallete, fnt, keyMap } from "../d";
import React, { useEffect, useLayoutEffect, useRef } from "react";
import { deleteElement, initialiseMotherNode } from "../feautures/node/nodeSlice";
import Sidebar from "../components/sidebar/Sidebar";
import FileEditors from "../components/file-editing/FileEditors";
import { RootState } from "../feautures/store";
import SettingsFile from "../components/settings/SettingsFile";
import { initialiseSettings } from "../feautures/node/settingsSlice";
import { ToastContainer,toast } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';
import Loader from "../components/Loader";
import useListenToKeyCombination from "../hooks/useListenToKeyCombination";


export default function Home() {
  const { show,isLoadingSettings, settings,settingsError } = useSelector((state: RootState) => state.settings);
  const {nodeError,isLoadingNode,selectedNode} = useSelector((state: RootState) => state.motherNode)
  const containerRef = useRef() as React.MutableRefObject<HTMLDivElement>;

  function updateCSSVariables(object: clr_pallete, container: HTMLDivElement) {
    const entries = Object.entries(object);
    entries.forEach((arr) => {
      container.style.setProperty(`--${arr[0]}`, `${arr[1]}`);
    });
  }

  function updateFontSettings(fnt: fnt, container: HTMLDivElement) {
    const entries = Object.entries(fnt);
    entries.forEach((ent) => {
      container.style.setProperty(`--base_font_${ent[0]}`, `'${ent[1]}'`);
    });
  }

  useLayoutEffect(() => {
    updateCSSVariables(settings.clr_pallete, containerRef.current);
    updateFontSettings(settings.fnt, containerRef.current);
  }, [settings._v]);

  useEffect(() => {
    if(nodeError.has || settingsError.has){
      toast.error('Unexpected error has occured.', {
        position:  toast.POSITION.BOTTOM_LEFT,
      })
    }
  }, [nodeError.has,settingsError.has])

  const deleteKeyMap: keyMap = {
    ctrl: false,
    shift: false,
    key: 'Delete'
  }

  // function handleDeleteKey(){
  //   if(selectedNode.toSelect.elementPath !== 'main'){
  //     dispatch(deleteElement(selectedNode))
  //   }
  // }

  // const didPressDelete = useListenToKeyCombination(deleteKeyMap,window, )

  // useEffect(() => {
  //   window.addEventListener('keydown', )
  // }, [])

  const dispatch = useDispatch();
  useEffect(() => {
    // @ts-ignore
    dispatch(initialiseSettings());
    // @ts-ignore
    dispatch(initialiseMotherNode());
  }, [settings._v]);

  return (
    <>
      <div ref={containerRef} className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Sidebar />
        {show.editor ? <SettingsFile /> : <FileEditors />}
      </div>
      <ToastContainer position="bottom-left" theme="light" closeOnClick />
      {
        isLoadingNode || isLoadingSettings ? <Loader /> : undefined
      }
    </>
  );
}
